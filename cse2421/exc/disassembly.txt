
ec:     file format elf32-i386


Disassembly of section .init:

08048358 <_init>:
 8048358:	push   ebx
 8048359:	sub    esp,0x8
 804835c:	call   8048361 <_init+0x9>
 8048361:	pop    ebx
 8048362:	add    ebx,0x1c9f
 8048368:	mov    eax,DWORD PTR [ebx-0x4]
 804836e:	test   eax,eax
 8048370:	je     8048377 <_init+0x1f>
 8048372:	call   80483b0 <__gmon_start__@plt>
 8048377:	add    esp,0x8
 804837a:	pop    ebx
 804837b:	ret    

Disassembly of section .plt:

08048380 <gets@plt-0x10>:
 8048380:	push   DWORD PTR ds:0x804a004
 8048386:	jmp    DWORD PTR ds:0x804a008
 804838c:	add    BYTE PTR [eax],al
	...

08048390 <gets@plt>:
 8048390:	jmp    DWORD PTR ds:0x804a00c
 8048396:	push   0x0
 804839b:	jmp    8048380 <_init+0x28>

080483a0 <puts@plt>:
 80483a0:	jmp    DWORD PTR ds:0x804a010
 80483a6:	push   0x8
 80483ab:	jmp    8048380 <_init+0x28>

080483b0 <__gmon_start__@plt>:
 80483b0:	jmp    DWORD PTR ds:0x804a014
 80483b6:	push   0x10
 80483bb:	jmp    8048380 <_init+0x28>

080483c0 <strlen@plt>:
 80483c0:	jmp    DWORD PTR ds:0x804a018
 80483c6:	push   0x18
 80483cb:	jmp    8048380 <_init+0x28>

080483d0 <__libc_start_main@plt>:
 80483d0:	jmp    DWORD PTR ds:0x804a01c
 80483d6:	push   0x20
 80483db:	jmp    8048380 <_init+0x28>

080483e0 <putchar@plt>:
 80483e0:	jmp    DWORD PTR ds:0x804a020
 80483e6:	push   0x28
 80483eb:	jmp    8048380 <_init+0x28>

080483f0 <__isoc99_scanf@plt>:
 80483f0:	jmp    DWORD PTR ds:0x804a024
 80483f6:	push   0x30
 80483fb:	jmp    8048380 <_init+0x28>

Disassembly of section .text:

08048400 <_start>:
 8048400:	xor    ebp,ebp
 8048402:	pop    esi
 8048403:	mov    ecx,esp
 8048405:	and    esp,0xfffffff0
 8048408:	push   eax
 8048409:	push   esp
 804840a:	push   edx
 804840b:	push   0x80486c0
 8048410:	push   0x8048650
 8048415:	push   ecx
 8048416:	push   esi
 8048417:	push   0x80484ec
 804841c:	call   80483d0 <__libc_start_main@plt>
 8048421:	hlt    
 8048422:	xchg   ax,ax
 8048424:	xchg   ax,ax
 8048426:	xchg   ax,ax
 8048428:	xchg   ax,ax
 804842a:	xchg   ax,ax
 804842c:	xchg   ax,ax
 804842e:	xchg   ax,ax

08048430 <deregister_tm_clones>:
 8048430:	mov    eax,0x804a033
 8048435:	sub    eax,0x804a030
 804843a:	cmp    eax,0x6
 804843d:	ja     8048441 <deregister_tm_clones+0x11>
 804843f:	repz ret 
 8048441:	mov    eax,0x0
 8048446:	test   eax,eax
 8048448:	je     804843f <deregister_tm_clones+0xf>
 804844a:	push   ebp
 804844b:	mov    ebp,esp
 804844d:	sub    esp,0x18
 8048450:	mov    DWORD PTR [esp],0x804a030
 8048457:	call   eax
 8048459:	leave  
 804845a:	ret    
 804845b:	nop
 804845c:	lea    esi,[esi+eiz*1+0x0]

08048460 <register_tm_clones>:
 8048460:	mov    eax,0x804a030
 8048465:	sub    eax,0x804a030
 804846a:	sar    eax,0x2
 804846d:	mov    edx,eax
 804846f:	shr    edx,0x1f
 8048472:	add    eax,edx
 8048474:	sar    eax,1
 8048476:	jne    804847a <register_tm_clones+0x1a>
 8048478:	repz ret 
 804847a:	mov    edx,0x0
 804847f:	test   edx,edx
 8048481:	je     8048478 <register_tm_clones+0x18>
 8048483:	push   ebp
 8048484:	mov    ebp,esp
 8048486:	sub    esp,0x18
 8048489:	mov    DWORD PTR [esp+0x4],eax
 804848d:	mov    DWORD PTR [esp],0x804a030
 8048494:	call   edx
 8048496:	leave  
 8048497:	ret    
 8048498:	nop
 8048499:	lea    esi,[esi+eiz*1+0x0]

080484a0 <__do_global_dtors_aux>:
 80484a0:	cmp    BYTE PTR ds:0x804a164,0x0
 80484a7:	jne    80484bc <__do_global_dtors_aux+0x1c>
 80484a9:	push   ebp
 80484aa:	mov    ebp,esp
 80484ac:	sub    esp,0x8
 80484af:	call   8048430 <deregister_tm_clones>
 80484b4:	mov    BYTE PTR ds:0x804a164,0x1
 80484bb:	leave  
 80484bc:	repz ret 
 80484be:	xchg   ax,ax

080484c0 <frame_dummy>:
 80484c0:	mov    eax,ds:0x8049f10
 80484c5:	test   eax,eax
 80484c7:	je     80484e7 <frame_dummy+0x27>
 80484c9:	mov    eax,0x0
 80484ce:	test   eax,eax
 80484d0:	je     80484e7 <frame_dummy+0x27>
 80484d2:	push   ebp
 80484d3:	mov    ebp,esp
 80484d5:	sub    esp,0x18
 80484d8:	mov    DWORD PTR [esp],0x8049f10
 80484df:	call   eax
 80484e1:	leave  
 80484e2:	jmp    8048460 <register_tm_clones>
 80484e7:	jmp    8048460 <register_tm_clones>

080484ec <main>:
 80484ec:	push   ebp
 80484ed:	mov    ebp,esp
 80484ef:	push   ebx
 80484f0:	sub    esp,0x94
 80484f6:	mov    DWORD PTR [ebp-0xc],0x0
 80484fd:	mov    DWORD PTR [ebp-0x10],0x0
 8048504:	mov    DWORD PTR [ebp-0x14],0x0
 804850b:	mov    DWORD PTR [ebp-0x18],0x0
 8048512:	push   0x80486e8
 8048517:	call   80483a0 <puts@plt>
 804851c:	add    esp,0x4
 804851f:	lea    eax,[ebp-0x98]
 8048525:	push   eax
 8048526:	call   8048390 <gets@plt>
 804852b:	add    esp,0x4
 804852e:	mov    DWORD PTR [ebp-0x8],0x0
 8048535:	jmp    804857d <main+0x91>
 8048537:	lea    edx,[ebp-0x98]
 804853d:	mov    eax,DWORD PTR [ebp-0x8]
 8048540:	add    eax,edx
 8048542:	movzx  eax,BYTE PTR [eax]
 8048545:	cmp    al,0x40
 8048547:	jle    8048579 <main+0x8d>
 8048549:	lea    edx,[ebp-0x98]
 804854f:	mov    eax,DWORD PTR [ebp-0x8]
 8048552:	add    eax,edx
 8048554:	movzx  eax,BYTE PTR [eax]
 8048557:	cmp    al,0x5a
 8048559:	jg     8048579 <main+0x8d>
 804855b:	lea    edx,[ebp-0x98]
 8048561:	mov    eax,DWORD PTR [ebp-0x8]
 8048564:	add    eax,edx
 8048566:	movzx  eax,BYTE PTR [eax]
 8048569:	add    eax,0x20
 804856c:	lea    ecx,[ebp-0x98]
 8048572:	mov    edx,DWORD PTR [ebp-0x8]
 8048575:	add    edx,ecx
 8048577:	mov    BYTE PTR [edx],al
 8048579:	add    DWORD PTR [ebp-0x8],0x1
 804857d:	mov    ebx,DWORD PTR [ebp-0x8]
 8048580:	lea    eax,[ebp-0x98]
 8048586:	push   eax
 8048587:	call   80483c0 <strlen@plt>
 804858c:	add    esp,0x4
 804858f:	cmp    ebx,eax
 8048591:	jb     8048537 <main+0x4b>
 8048593:	push   0xa
 8048595:	call   80483e0 <putchar@plt>
 804859a:	add    esp,0x4
 804859d:	push   0x8048708
 80485a2:	call   80483a0 <puts@plt>
 80485a7:	add    esp,0x4
 80485aa:	push   0x8048730
 80485af:	call   80483a0 <puts@plt>
 80485b4:	add    esp,0x4
 80485b7:	lea    eax,[ebp-0x18]
 80485ba:	push   eax
 80485bb:	lea    eax,[ebp-0x14]
 80485be:	push   eax
 80485bf:	lea    eax,[ebp-0x10]
 80485c2:	push   eax
 80485c3:	lea    eax,[ebp-0xc]
 80485c6:	push   eax
 80485c7:	push   0x8048782
 80485cc:	call   80483f0 <__isoc99_scanf@plt>
 80485d1:	add    esp,0x14
 80485d4:	push   0xa
 80485d6:	call   80483e0 <putchar@plt>
 80485db:	add    esp,0x4
 80485de:	mov    eax,DWORD PTR [ebp-0x18]
 80485e1:	movzx  ebx,ax
 80485e4:	mov    eax,DWORD PTR [ebp-0x14]
 80485e7:	movzx  ecx,ax
 80485ea:	mov    eax,DWORD PTR [ebp-0x10]
 80485ed:	movzx  edx,ax
 80485f0:	mov    eax,DWORD PTR [ebp-0xc]
 80485f3:	movzx  eax,ax
 80485f6:	push   ebx
 80485f7:	push   ecx
 80485f8:	push   edx
 80485f9:	push   eax
 80485fa:	lea    eax,[ebp-0x98]
 8048600:	push   eax
 8048601:	call   804a030 <__TMC_END__>
 8048606:	add    esp,0x14
 8048609:	test   eax,eax
 804860b:	je     8048614 <main+0x128>
 804860d:	call   8048635 <correct>
 8048612:	jmp    8048619 <main+0x12d>
 8048614:	call   8048623 <incorrect>
 8048619:	mov    eax,0x0
 804861e:	mov    ebx,DWORD PTR [ebp-0x4]
 8048621:	leave  
 8048622:	ret    

08048623 <incorrect>:
 8048623:	push   ebp
 8048624:	mov    ebp,esp
 8048626:	push   0x80487b0
 804862b:	call   80483a0 <puts@plt>
 8048630:	add    esp,0x4
 8048633:	leave  
 8048634:	ret    

08048635 <correct>:
 8048635:	push   ebp
 8048636:	mov    ebp,esp
 8048638:	push   0x80487bd
 804863d:	call   80483a0 <puts@plt>
 8048642:	add    esp,0x4
 8048645:	leave  
 8048646:	ret    
 8048647:	xchg   ax,ax
 8048649:	xchg   ax,ax
 804864b:	xchg   ax,ax
 804864d:	xchg   ax,ax
 804864f:	nop

08048650 <__libc_csu_init>:
 8048650:	push   ebp
 8048651:	push   edi
 8048652:	push   esi
 8048653:	push   ebx
 8048654:	call   80486c2 <__i686.get_pc_thunk.bx>
 8048659:	add    ebx,0x19a7
 804865f:	sub    esp,0x1c
 8048662:	mov    ebp,DWORD PTR [esp+0x30]
 8048666:	lea    edi,[ebx-0xf4]
 804866c:	call   8048358 <_init>
 8048671:	lea    eax,[ebx-0xf8]
 8048677:	sub    edi,eax
 8048679:	sar    edi,0x2
 804867c:	test   edi,edi
 804867e:	je     80486a9 <__libc_csu_init+0x59>
 8048680:	xor    esi,esi
 8048682:	lea    esi,[esi+0x0]
 8048688:	mov    eax,DWORD PTR [esp+0x38]
 804868c:	mov    DWORD PTR [esp],ebp
 804868f:	mov    DWORD PTR [esp+0x8],eax
 8048693:	mov    eax,DWORD PTR [esp+0x34]
 8048697:	mov    DWORD PTR [esp+0x4],eax
 804869b:	call   DWORD PTR [ebx+esi*4-0xf8]
 80486a2:	add    esi,0x1
 80486a5:	cmp    esi,edi
 80486a7:	jne    8048688 <__libc_csu_init+0x38>
 80486a9:	add    esp,0x1c
 80486ac:	pop    ebx
 80486ad:	pop    esi
 80486ae:	pop    edi
 80486af:	pop    ebp
 80486b0:	ret    
 80486b1:	jmp    80486c0 <__libc_csu_fini>
 80486b3:	nop
 80486b4:	nop
 80486b5:	nop
 80486b6:	nop
 80486b7:	nop
 80486b8:	nop
 80486b9:	nop
 80486ba:	nop
 80486bb:	nop
 80486bc:	nop
 80486bd:	nop
 80486be:	nop
 80486bf:	nop

080486c0 <__libc_csu_fini>:
 80486c0:	repz ret 

080486c2 <__i686.get_pc_thunk.bx>:
 80486c2:	mov    ebx,DWORD PTR [esp]
 80486c5:	ret    
 80486c6:	xchg   ax,ax

Disassembly of section .fini:

080486c8 <_fini>:
 80486c8:	push   ebx
 80486c9:	sub    esp,0x8
 80486cc:	call   80486d1 <_fini+0x9>
 80486d1:	pop    ebx
 80486d2:	add    ebx,0x192f
 80486d8:	add    esp,0x8
 80486db:	pop    ebx
 80486dc:	ret    

Disassembly of section .check:

0804a030 <test_key>:
 804a030:	push   ebp
 804a031:	mov    ebp,esp
 804a033:	push   ebx
 804a034:	sub    esp,0x14
 804a037:	mov    ebx,DWORD PTR [ebp+0xc]
 804a03a:	mov    ecx,DWORD PTR [ebp+0x10]
 804a03d:	mov    edx,DWORD PTR [ebp+0x14]
 804a040:	mov    eax,DWORD PTR [ebp+0x18]
 804a043:	mov    WORD PTR [ebp-0xc],bx
 804a047:	mov    WORD PTR [ebp-0x10],cx
 804a04b:	mov    WORD PTR [ebp-0x14],dx
 804a04f:	mov    WORD PTR [ebp-0x18],ax
 804a053:	mov    DWORD PTR [ebp-0x8],0x6
 804a05a:	sub    DWORD PTR [ebp-0x8],0x1
 804a05e:	cmp    DWORD PTR [ebp-0x8],0x5
 804a062:	ja     804a0a9 <test_key+0x79>
 804a064:	mov    eax,DWORD PTR [ebp-0x8]
 804a067:	shl    eax,0x2
 804a06a:	add    eax,0x8048798
 804a06f:	mov    eax,DWORD PTR [eax]
 804a071:	jmp    eax
 804a073:	mov    BYTE PTR ds:0x804a0af,0x31
 804a07a:	jmp    804a0aa <test_key+0x7a>
 804a07c:	mov    BYTE PTR ds:0x804a0af,0x29
 804a083:	jmp    804a0aa <test_key+0x7a>
 804a085:	mov    BYTE PTR ds:0x804a0af,0x1
 804a08c:	jmp    804a0aa <test_key+0x7a>
 804a08e:	mov    BYTE PTR ds:0x804a0af,0x29
 804a095:	jmp    804a0aa <test_key+0x7a>
 804a097:	mov    BYTE PTR ds:0x804a0af,0x31
 804a09e:	jmp    804a0aa <test_key+0x7a>
 804a0a0:	mov    BYTE PTR ds:0x804a0af,0x1
 804a0a7:	jmp    804a0aa <test_key+0x7a>
 804a0a9:	nop
 804a0aa:	mov    eax,0x8086

0804a0af <x>:
 804a0af:	and    DWORD PTR [ebp-0x18],eax
 804a0b2:	cmp    DWORD PTR [ebp-0x8],0x0
 804a0b6:	jne    804a05a <test_key+0x2a>
 804a0b8:	mov    DWORD PTR [ebp-0x8],0x0
 804a0bf:	jmp    804a111 <x+0x62>
 804a0c1:	mov    eax,DWORD PTR [ebp-0x8]
 804a0c4:	mov    edx,DWORD PTR [ebp+0x8]
 804a0c7:	add    eax,edx
 804a0c9:	movzx  eax,BYTE PTR [eax]
 804a0cc:	cbw    
 804a0ce:	sub    WORD PTR [ebp-0xc],ax
 804a0d2:	mov    eax,DWORD PTR [ebp-0x8]
 804a0d5:	mov    edx,DWORD PTR [ebp+0x8]
 804a0d8:	add    eax,edx
 804a0da:	movzx  eax,BYTE PTR [eax]
 804a0dd:	cbw    
 804a0df:	sub    WORD PTR [ebp-0x10],ax
 804a0e3:	mov    eax,DWORD PTR [ebp-0x8]
 804a0e6:	mov    edx,DWORD PTR [ebp+0x8]
 804a0e9:	add    eax,edx
 804a0eb:	movzx  eax,BYTE PTR [eax]
 804a0ee:	cbw    
 804a0f0:	add    WORD PTR [ebp-0x14],ax
 804a0f4:	mov    eax,DWORD PTR [ebp-0x8]
 804a0f7:	mov    edx,DWORD PTR [ebp+0x8]
 804a0fa:	add    eax,edx
 804a0fc:	movzx  eax,BYTE PTR [eax]
 804a0ff:	movsx  dx,al
 804a103:	movzx  eax,WORD PTR [ebp-0x18]
 804a107:	add    eax,edx
 804a109:	mov    WORD PTR [ebp-0x18],ax
 804a10d:	add    DWORD PTR [ebp-0x8],0x1
 804a111:	mov    eax,DWORD PTR [ebp-0x8]
 804a114:	mov    edx,DWORD PTR [ebp+0x8]
 804a117:	add    eax,edx
 804a119:	movzx  eax,BYTE PTR [eax]
 804a11c:	test   al,al
 804a11e:	jne    804a0c1 <x+0x12>
 804a120:	cmp    WORD PTR [ebp-0xc],0xbeef
 804a126:	je     804a12f <x+0x80>
 804a128:	mov    eax,0x0
 804a12d:	jmp    804a15e <x+0xaf>
 804a12f:	movzx  edx,WORD PTR [ebp-0x10]
 804a133:	movzx  eax,WORD PTR [ebp-0x14]
 804a137:	imul   eax,edx
 804a13a:	cmp    eax,0xc0ffee
 804a13f:	je     804a148 <x+0x99>
 804a141:	mov    eax,0x0
 804a146:	jmp    804a15e <x+0xaf>
 804a148:	movzx  eax,WORD PTR [ebp-0x18]
 804a14c:	cmp    ax,0x8086
 804a150:	je     804a159 <x+0xaa>
 804a152:	mov    eax,0x0
 804a157:	jmp    804a15e <x+0xaf>
 804a159:	mov    eax,0x1
 804a15e:	add    esp,0x14
 804a161:	pop    ebx
 804a162:	pop    ebp
 804a163:	ret    
